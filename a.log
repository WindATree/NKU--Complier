*** IR Dump Before Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"b is greater than 10\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare dso_local i64 @clock() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"b is greater than 10\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare dso_local i64 @clock() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Loop Strength Reduction ***
; Preheader:
25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

; Loop:
26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

; Exit blocks
39:                                               ; preds = %26
  br label %40
*** IR Dump After Loop Strength Reduction ***
; Preheader:
25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

; Loop:
26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

; Exit blocks
39:                                               ; preds = %26
  br label %40
*** IR Dump Before Loop Strength Reduction ***
; Preheader:
17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

; Loop:
21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

; Exit blocks
43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
*** IR Dump After Loop Strength Reduction ***
; Preheader:
17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

; Loop:
21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

; Exit blocks
43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %40, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %43

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %36, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %39

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  br label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %12, align 4
  br label %26

39:                                               ; preds = %26
  br label %40

40:                                               ; preds = %39
  %41 = load i32, i32* %11, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %11, align 4
  br label %21

43:                                               ; preds = %21
  %44 = call i64 @clock() #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = load i64, i64* %7, align 8
  %47 = sub nsw i64 %45, %46
  %48 = sitofp i64 %47 to double
  %49 = fdiv double %48, 1.000000e+06
  store double %49, double* %9, align 8
  ret i32 0
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Rewrite Symbols ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"b is greater than 10\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare dso_local i64 @clock() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Rewrite Symbols ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"b is greater than 10\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare dso_local i64 @clock() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local void @mergeSort() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret void
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness

# End machine code for function mergeSort.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Slot index numbering ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Machine code sinking ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function mergeSort: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Slot index numbering ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Tail Duplication ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0

# End machine code for function mergeSort.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function mergeSort: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function mergeSort.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  store i32 42, i32* %10, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp sgt i32 %13, 10
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %2)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* %3)
  %20 = call i64 @clock() #3
  store i64 %20, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %38, %17
  %22 = load i32, i32* %11, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %41

25:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %30, %25
  %27 = load i32, i32* %12, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = add nsw i32 %31, %32
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %5, align 4
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %5, align 4
  %36 = load i32, i32* %12, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %12, align 4
  br label %26

38:                                               ; preds = %26
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %21

41:                                               ; preds = %21
  %42 = call i64 @clock() #3
  store i64 %42, i64* %8, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load i64, i64* %7, align 8
  %45 = sub nsw i64 %43, %44
  %46 = sitofp i64 %45 to double
  %47 = fdiv double %46, 1.000000e+06
  store double %47, double* %9, align 8
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  %1:gr64 = MOV32ri64 @.str
192B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
208B	  %3:gr8 = COPY %2.sub_8bit:gr32
224B	  $rdi = COPY %1:gr64
240B	  $al = COPY %3:gr8
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  %4:gr32 = COPY $eax

304B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  %5:gr64 = MOV32ri64 @.str.1
352B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
368B	  %7:gr8 = COPY %6.sub_8bit:gr32
384B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
400B	  $rdi = COPY %5:gr64
416B	  $rsi = COPY %8:gr64
432B	  $al = COPY %7:gr8
448B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %9:gr32 = COPY $eax
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
512B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
528B	  $rdi = COPY %5:gr64
544B	  $rsi = COPY %10:gr64
560B	  $al = COPY %7:gr8
576B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
592B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
608B	  %11:gr32 = COPY $eax
624B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
656B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  %12:gr64 = COPY $rax
688B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
704B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

720B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

736B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
752B	  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
768B	  JCC_1 %bb.8, 13, implicit $eflags
784B	  JMP_1 %bb.4

800B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

816B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

832B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

848B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
864B	  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
880B	  JCC_1 %bb.7, 13, implicit $eflags
896B	  JMP_1 %bb.6

912B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

928B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
944B	  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
960B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
976B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
992B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
1008B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1024B	  JMP_1 %bb.5

1040B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1056B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1072B	  JMP_1 %bb.3

1088B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1120B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  %15:gr64 = COPY $rax
1168B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
1216B	  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1232B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
1248B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
1264B	  $eax = COPY %19:gr32
1280B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  %1:gr64 = MOV32ri64 @.str
192B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
208B	  %3:gr8 = COPY %2.sub_8bit:gr32
224B	  $rdi = COPY %1:gr64
240B	  $al = COPY %3:gr8
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  %4:gr32 = COPY $eax

304B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  %5:gr64 = MOV32ri64 @.str.1
352B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
368B	  %7:gr8 = COPY %6.sub_8bit:gr32
384B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
400B	  $rdi = COPY %5:gr64
416B	  $rsi = COPY %8:gr64
432B	  $al = COPY %7:gr8
448B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
464B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %9:gr32 = COPY $eax
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
512B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
528B	  $rdi = COPY %5:gr64
544B	  $rsi = COPY %10:gr64
560B	  $al = COPY %7:gr8
576B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
592B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
608B	  %11:gr32 = COPY $eax
624B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
656B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  %12:gr64 = COPY $rax
688B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
704B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

720B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

736B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
752B	  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
768B	  JCC_1 %bb.8, 13, implicit $eflags
784B	  JMP_1 %bb.4

800B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

816B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

832B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

848B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
864B	  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
880B	  JCC_1 %bb.7, 13, implicit $eflags
896B	  JMP_1 %bb.6

912B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

928B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
944B	  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
960B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
976B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
992B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
1008B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1024B	  JMP_1 %bb.5

1040B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1056B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1072B	  JMP_1 %bb.3

1088B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1120B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  %15:gr64 = COPY $rax
1168B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
1216B	  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1232B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
1248B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
1264B	  $eax = COPY %19:gr32
1280B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  %14:gr32 = SUB32rm %13:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  %21:gr32 = SUB32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY %2.sub_8bit:gr32
  $rdi = COPY %1:gr64
  $al = COPY %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %10:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %19:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr killed %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY killed %2.sub_8bit:gr32
  $rdi = COPY killed %1:gr64
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY killed %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %10:gr64
  $al = COPY killed %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY killed $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY killed $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm killed %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm killed %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %19:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr killed %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY killed %2.sub_8bit:gr32
  $rdi = COPY killed %1:gr64
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY killed %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %10:gr64
  $al = COPY killed %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY killed $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY killed $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm killed %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm killed %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %19:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr killed %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY killed %2.sub_8bit:gr32
  $rdi = COPY killed %1:gr64
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY killed %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %10:gr64
  $al = COPY killed %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY killed $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY killed $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm killed %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm killed %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %19:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr killed %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY killed %2.sub_8bit:gr32
  $rdi = COPY killed %1:gr64
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY killed %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %10:gr64
  $al = COPY killed %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY killed $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %23:gr32 = nsw ADD32rm %22:gr32(tied-def 0), %stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.4)
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY killed $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = nsw SUB64rm killed %15:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = nofpexcept DIVSDrm killed %17:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %19:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr killed %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY killed %2.sub_8bit:gr32
  $rdi = COPY killed %1:gr64
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY killed %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %10:gr64
  $al = COPY killed %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY killed $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %24:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %23:gr32 = COPY killed %24:gr32
  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY killed $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = COPY killed %15:gr64
  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = COPY killed %17:fr64
  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %19:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  %0:gr8 = MOV8ri 1
  TEST8rr killed %0:gr8, %0:gr8, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV32ri64 @.str
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  %3:gr8 = COPY killed %2.sub_8bit:gr32
  $rdi = COPY killed %1:gr64
  $al = COPY killed %3:gr8
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str.1
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY killed %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %10:gr64
  $al = COPY killed %7:gr8
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr64 = COPY killed $rax
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed %12:gr64 :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  %24:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %23:gr32 = COPY killed %24:gr32
  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %22:gr32 :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %23:gr32 :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = COPY killed $rax
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
  %16:gr64 = COPY killed %15:gr64
  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
  %18:fr64 = COPY killed %17:fr64
  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %19:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr killed %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  %1:gr64 = MOV32ri64 @.str
192B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
208B	  %3:gr8 = COPY killed %2.sub_8bit:gr32
224B	  $rdi = COPY killed %1:gr64
240B	  $al = COPY killed %3:gr8
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %5:gr64 = MOV32ri64 @.str.1
336B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
352B	  %7:gr8 = COPY killed %6.sub_8bit:gr32
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = COPY %5:gr64
400B	  $rsi = COPY killed %8:gr64
416B	  $al = COPY %7:gr8
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = COPY killed %5:gr64
512B	  $rsi = COPY killed %10:gr64
528B	  $al = COPY killed %7:gr8
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm killed %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm killed %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %24:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
912B	  %23:gr32 = COPY killed %24:gr32
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %15:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
1168B	  %16:gr64 = COPY killed %15:gr64
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
1216B	  %18:fr64 = COPY killed %17:fr64
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
1264B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
1280B	  $eax = COPY killed %19:gr32
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr killed %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  %1:gr64 = MOV32ri64 @.str
192B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
208B	  %3:gr8 = COPY killed %2.sub_8bit:gr32
224B	  $rdi = COPY killed %1:gr64
240B	  $al = COPY killed %3:gr8
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %5:gr64 = MOV32ri64 @.str.1
336B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
352B	  %7:gr8 = COPY killed %6.sub_8bit:gr32
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = COPY %5:gr64
400B	  $rsi = COPY killed %8:gr64
416B	  $al = COPY %7:gr8
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = COPY killed %5:gr64
512B	  $rsi = COPY killed %10:gr64
528B	  $al = COPY killed %7:gr8
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm killed %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm killed %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %24:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
912B	  %23:gr32 = COPY killed %24:gr32
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %15:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
1168B	  %16:gr64 = COPY killed %15:gr64
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %17:fr64 = nofpexcept CVTSI642SDrr killed %16:gr64, implicit $mxcsr
1216B	  %18:fr64 = COPY killed %17:fr64
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed %18:fr64 :: (store 8 into %ir.9)
1264B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
1280B	  $eax = COPY killed %19:gr32
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  %1:gr64 = MOV32ri64 @.str
192B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
208B	  %3:gr8 = COPY %2.sub_8bit:gr32
224B	  $rdi = COPY %1:gr64
240B	  $al = COPY %3:gr8
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %5:gr64 = MOV32ri64 @.str.1
336B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
352B	  %7:gr8 = COPY %6.sub_8bit:gr32
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = COPY %5:gr64
400B	  $rsi = COPY %8:gr64
416B	  $al = COPY %7:gr8
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = COPY %5:gr64
512B	  $rsi = COPY %10:gr64
528B	  $al = COPY %7:gr8
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %24:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
912B	  %23:gr32 = COPY %24:gr32
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %15:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
1168B	  %16:gr64 = COPY %15:gr64
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %17:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1216B	  %18:fr64 = COPY %17:fr64
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1264B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
1280B	  $eax = COPY %19:gr32
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  %1:gr64 = MOV32ri64 @.str
192B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
208B	  %3:gr8 = COPY %2.sub_8bit:gr32
224B	  $rdi = COPY %1:gr64
240B	  $al = COPY %3:gr8
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %5:gr64 = MOV32ri64 @.str.1
336B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
352B	  %7:gr8 = COPY %6.sub_8bit:gr32
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = COPY %5:gr64
400B	  $rsi = COPY %8:gr64
416B	  $al = COPY %7:gr8
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = COPY %5:gr64
512B	  $rsi = COPY %10:gr64
528B	  $al = COPY %7:gr8
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %24:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
912B	  %23:gr32 = COPY %24:gr32
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %15:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %15:gr64 :: (store 8 into %ir.8)
1168B	  %16:gr64 = COPY %15:gr64
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %17:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1216B	  %18:fr64 = COPY %17:fr64
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1264B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
1280B	  $eax = COPY %19:gr32
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY killed $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY killed $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  %0:gr8 = MOV8ri 1
96B	  TEST8rr %0:gr8, %0:gr8, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  %8:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
400B	  $rsi = COPY %8:gr64
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %10:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
512B	  $rsi = COPY %10:gr64
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %12:gr64 = COPY $rax
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, %12:gr64 :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  %13:gr32 = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm %13:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  %20:gr32 = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm %20:gr32, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  %23:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %22:gr32, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %22:gr32 :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  %16:gr64 = COPY $rax
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16:gr64 :: (store 8 into %ir.8)
1184B	  %16:gr64 = nsw SUB64rm %16:gr64(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  %18:fr64 = nofpexcept CVTSI642SDrr %16:gr64, implicit $mxcsr
1232B	  %18:fr64 = nofpexcept DIVSDrm %18:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, %18:fr64 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  renamable $al = MOV8ri 1
96B	  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
1184B	  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1232B	  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  renamable $al = MOV8ri 1
96B	  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
1184B	  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1232B	  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  renamable $al = MOV8ri 1
96B	  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
1184B	  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1232B	  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
48B	  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
64B	  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
80B	  renamable $al = MOV8ri 1
96B	  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
112B	  JCC_1 %bb.2, 5, implicit killed $eflags
128B	  JMP_1 %bb.1

144B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  $rdi = MOV32ri64 @.str
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

288B	bb.2 (%ir-block.17):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
368B	  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
384B	  $rdi = MOV32ri64 @.str.1
416B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
432B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
496B	  $rdi = MOV32ri64 @.str.1
528B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
544B	  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
592B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
656B	  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

672B	bb.3 (%ir-block.21):
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

688B	  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
704B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
720B	  JCC_1 %bb.8, 13, implicit killed $eflags
736B	  JMP_1 %bb.4

752B	bb.4 (%ir-block.25):
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

768B	  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

784B	bb.5 (%ir-block.26):
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

800B	  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
816B	  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
832B	  JCC_1 %bb.7, 13, implicit killed $eflags
848B	  JMP_1 %bb.6

864B	bb.6 (%ir-block.30):
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

880B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
896B	  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
928B	  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
944B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
960B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
976B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
992B	  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
1008B	  JMP_1 %bb.5

1024B	bb.7 (%ir-block.38):
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1040B	  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
1056B	  JMP_1 %bb.3

1072B	bb.8 (%ir-block.41):
	; predecessors: %bb.3

1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1104B	  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
1184B	  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
1200B	  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1232B	  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
1248B	  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
1280B	  $eax = MOV32r0 implicit-def dead $eflags
1296B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.4, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi %stack.9, 1, $noreg, 0, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.1, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.6, 1, $noreg, 0, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi %stack.10, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm %stack.11, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.7, 1, $noreg, 0, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), %stack.6, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr %stack.8, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.7 (%ir-block.38):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)
  JMP_1 %bb.3

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-32]
  fi#2: size=4, align=4, at location [SP-28]
  fi#3: size=4, align=4, at location [SP-24]
  fi#4: size=4, align=4, at location [SP-20]
  fi#5: size=4, align=4, at location [SP-48]
  fi#6: size=8, align=8, at location [SP-40]
  fi#7: size=8, align=8, at location [SP-72]
  fi#8: size=8, align=8, at location [SP-64]
  fi#9: size=4, align=4, at location [SP-44]
  fi#10: size=4, align=4, at location [SP-16]
  fi#11: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -44, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store 4 into %ir.5)
  MOV32mi $rbp, 1, $noreg, -36, $noreg, 42 :: (store 4 into %ir.10)
  renamable $al = MOV8ri 1
  TEST8rr killed renamable $al, renamable $al, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax

bb.2 (%ir-block.17):
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $rsi = LEA64r $rbp, 1, $noreg, -24, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rax :: (store 8 into %ir.7)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.11)
  JMP_1 %bb.3

bb.7 (%ir-block.38, align 4):
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 $rbp, 1, $noreg, -8, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.11), (dereferenceable load 4 from %ir.11)

bb.3 (%ir-block.21):
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.11)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.3)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.4 (%ir-block.25):
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.12)

bb.5 (%ir-block.26, align 4):
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.12)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -24, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.2)
  JCC_1 %bb.7, 13, implicit killed $eflags

bb.6 (%ir-block.30):
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (dereferenceable load 4 from %ir.4)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -40, $noreg, renamable $ecx :: (store 4 into %ir.6)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $ecx :: (store 4 into %ir.5)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.12), (dereferenceable load 4 from %ir.12)
  JMP_1 %bb.5

bb.8 (%ir-block.41):
; predecessors: %bb.3

  CALL64pcrel32 @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $rax :: (store 8 into %ir.8)
  renamable $rax = nsw SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -32, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.7)
  renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm0 = nofpexcept DIVSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load 8 from constant-pool)
  MOVSDmr $rbp, 1, $noreg, -56, $noreg, killed renamable $xmm0 :: (store 8 into %ir.9)
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

