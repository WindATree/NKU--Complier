
;; Function mergeSort (mergeSort, funcdef_no=23, decl_uid=2636, cgraph_uid=24, symbol_order=23)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }


Alias information for mergeSort

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
mergeSort ()
{
  <bb 2> [local count: 1073741824]:
  return;

}



;; Function main (main, funcdef_no=24, decl_uid=2639, cgraph_uid=25, symbol_order=24) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = &n
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = &count
start_9 = NONLOCAL
end_11 = NONLOCAL
_1 = end_11 + UNKNOWN
_1 = start_9 + UNKNOWN
_2 = _1 + UNKNOWN
cpu_time_used_12 = _2 + UNKNOWN
cpu_time_used_12 = &NONLOCAL
count.2_3 = count
n.3_4 = n
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = n.3_4
ESCAPED = count.2_3
ESCAPED = cpu_time_used_12
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 3 5 10 11 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__printf_chk";
"*__isoc99_scanf";
"n";
"count";
"clock";
"start_9";
"end_11";
"_1";
"_2";
"cpu_time_used_12"[label="cpu_time_used_12 = { 5 }"];
"count.2_3";
"n.3_4";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*__printf_chk";
"**__isoc99_scanf";
"*n";
"*count";
"*clock";
"*start_9";
"*end_11";
"*_1";
"*_2";
"*cpu_time_used_12";
"*count.2_3";
"*n.3_4";

  // Edges in the constraint graph:
"cpu_time_used_12" -> "ESCAPED";
"count.2_3" -> "ESCAPED";
"n.3_4" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "start_9";
"NONLOCAL" -> "end_11";
"count" -> "count.2_3";
"n" -> "n.3_4";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__printf_chk";
"*__isoc99_scanf";
"clock";
"start_9" [label="\N\n_1 = start_9 + UNKNOWN\l"];
"_1" [label="\N\n_2 = _1 + UNKNOWN\l"];
"_2" [label="\N\ncpu_time_used_12 = _2 + UNKNOWN\l"];
"cpu_time_used_12";
"count.2_3";
"n.3_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n.3_4";
"STOREDANYTHING" -> "count.2_3";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "cpu_time_used_12";
"cpu_time_used_12" -> "ESCAPED";
"count.2_3" -> "ESCAPED";
"n.3_4" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = start_9\l"];
"STOREDANYTHING";
"INTEGER";
"__printf_chk";
"*__isoc99_scanf";
"clock";
"start_9" [label="\N\n_1 = start_9 + UNKNOWN\l"];
"_1" [label="\N\n_2 = _1 + UNKNOWN\l"];
"_2" [label="\N\ncpu_time_used_12 = _2 + UNKNOWN\l"];
"cpu_time_used_12";
"count.2_3";
"n.3_4";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n.3_4";
"STOREDANYTHING" -> "count.2_3";
"STOREDANYTHING" -> "_1";
"STOREDANYTHING" -> "_2";
"STOREDANYTHING" -> "cpu_time_used_12";
"start_9" -> "ESCAPED";
"start_9" -> "count.2_3";
"start_9" -> "n.3_4";
"cpu_time_used_12" -> "ESCAPED";
"count.2_3" -> "ESCAPED";
"n.3_4" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL n count }
NONLOCAL = { ESCAPED NONLOCAL } same as start_9
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__printf_chk = { }
*__isoc99_scanf = { }
n = { ESCAPED NONLOCAL } same as n.3_4
count = { ESCAPED NONLOCAL } same as count.2_3
clock = { }
start_9 = { ESCAPED NONLOCAL }
end_11 = { ESCAPED NONLOCAL } same as start_9
_1 = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL }
cpu_time_used_12 = { ESCAPED NONLOCAL }
count.2_3 = { ESCAPED NONLOCAL }
n.3_4 = { ESCAPED NONLOCAL }


Alias information for main

Aliased symbols

count, UID D.2642, int, is addressable
n, UID D.2641, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.2641 D.2642 } (escaped)

Flow-insensitive points-to information


;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
main ()
{
  double cpu_time_used;
  clock_t end;
  clock_t start;
  int count;
  int n;
  long int _1;
  double _2;
  int count.2_3;
  int n.3_4;

  <bb 2> [local count: 1073741824]:
  __printf_chk (1, "\xe8\xaf\xb7\xe8\xbe\x93\xe5\x85\xa5\xe6\x96\x90\xe6\xb3\xa2\xe9\x82\xa3\xe5\xa5\x91\xe6\x95\xb0\xe5\x88\x97\xe7\x9a\x84\xe9\xa1\xb9\xe6\x95\xb0 n: ");
  scanf ("%d", &n);
  __printf_chk (1, "\xe8\xaf\xb7\xe8\xbe\x93\xe5\x85\xa5\xe8\xae\xa1\xe7\xae\x97\xe6\xac\xa1\xe6\x95\xb0 count: ");
  scanf ("%d", &count);
  start_9 = clock ();
  end_11 = clock ();
  _1 = end_11 - start_9;
  _2 = (double) _1;
  cpu_time_used_12 = _2 / 1.0e+6;
  count.2_3 = count;
  n.3_4 = n;
  __printf_chk (1, "\xe8\xae\xa1\xe7\xae\x97 %d \xe9\xa1\xb9\xe6\x96\x90\xe6\xb3\xa2\xe9\x82\xa3\xe5\xa5\x91\xe6\x95\xb0\xe5\x88\x97\xef\xbc\x8c\xe9\x87\x8d\xe5\xa4\x8d %d \xe6\xac\xa1\xe7\x9a\x84\xe6\x80\xbb\xe8\x80\x97\xe6\x97\xb6\xe4\xb8\xba: %f \xe7\xa7\x92\n", n.3_4, count.2_3, cpu_time_used_12);
  n ={v} {CLOBBER};
  count ={v} {CLOBBER};
  return 0;

}


